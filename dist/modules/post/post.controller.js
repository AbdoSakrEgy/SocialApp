"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = require("express");
const post_service_1 = __importDefault(require("./post.service"));
const auth_middleware_1 = require("../../middlewares/auth.middleware");
const validation_middleware_1 = require("../../middlewares/validation.middleware");
const post_validation_1 = require("./post.validation");
const multer_upload_1 = require("../../utils/multer/multer.upload");
const router = (0, express_1.Router)();
const postServices = new post_service_1.default();
router.post("/create-post", auth_middleware_1.auth, (0, multer_upload_1.multerUpload)({}).array("attachments", 4), (0, validation_middleware_1.validation)(post_validation_1.createPostSchema), postServices.createPost);
router.post("/like-post/:postId", auth_middleware_1.auth, (0, validation_middleware_1.validation)(post_validation_1.likePostSchema), postServices.likePost);
router.patch("/update-post/:postId", auth_middleware_1.auth, (0, multer_upload_1.multerUpload)({}).array("newAttachments"), (0, validation_middleware_1.validation)(post_validation_1.updatePostSchema), postServices.updatePost);
router.get("/get-post/:postId", auth_middleware_1.auth, (0, validation_middleware_1.validation)(post_validation_1.getPostSchema), postServices.getPost);
router.delete("/soft-delete-post/:postId", auth_middleware_1.auth, (0, validation_middleware_1.validation)(post_validation_1.deletePostSchema), postServices.softDeletePost);
router.delete("/hard-delete-post/:postId", auth_middleware_1.auth, (0, validation_middleware_1.validation)(post_validation_1.deletePostSchema), postServices.hardDeletePost);
router.post("/add-comment", auth_middleware_1.auth, (0, validation_middleware_1.validation)(post_validation_1.addCommentSchema), postServices.addComment);
router.patch("/update-comment", auth_middleware_1.auth, (0, validation_middleware_1.validation)(post_validation_1.updateCommentSchema), postServices.updateComment);
router.get("/get-comment", auth_middleware_1.auth, (0, validation_middleware_1.validation)(post_validation_1.getCommentSchema), postServices.getComment);
router.delete("/delete-comment", auth_middleware_1.auth, (0, validation_middleware_1.validation)(post_validation_1.deleteCommentSchema), postServices.deleteComment);
exports.default = router;
